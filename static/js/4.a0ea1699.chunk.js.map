{"version":3,"sources":["../../../src/index.ts","../../../src/form-control.tsx","../../../src/use-boolean.ts","../../../src/use-form-control.ts","../../../src/select.tsx","Pages/RestaurantPage.js"],"names":["createContext","strict","name","useFormControlProvider","props","id","isReadOnly","uuid","useId","idProp","labelId","feedbackId","helpTextId","React","initialState","useState","value","on","useCallback","setValue","off","toggle","prev","useBoolean","getHelpTextProps","forwardedRef","ref","mergeRefs","node","setHasHelpText","getLabelProps","dataAttr","htmlFor","isDisabled","isFocused","isInvalid","getErrorMessageProps","setHasFeedbackText","getRootProps","role","getRequiredIndicatorProps","children","isRequired","onFocus","setFocus","onBlur","hasFeedbackText","hasHelpText","htmlProps","FormControl","forwardRef","styles","useMultiStyleConfig","omitThemingProps","className","cx","contextValue","__css","FormHelperText","field","useFormControlContext","useStyles","useFormControl","labelIds","disabled","readOnly","required","callAllHandlers","useFormControlProps","ariaAttr","SelectField","placeholder","Select","iconSize","split","rest","ownProps","rootStyles","width","height","position","color","fieldStyles","mergeWith","paddingEnd","_focus","zIndex","h","minH","iconColor","icon","fontSize","DefaultIcon","viewBox","fill","d","IconWrapper","chakra","baseStyle","display","alignItems","justifyContent","pointerEvents","top","transform","SelectIcon","clone","focusable","style","SpotPage","colorMode","useColorMode","navigate","useNavigate","useParams","place","classify","currentSpots","setCurrentSpots","classitem","setClassItem","searchTerm","setSearchTerm","skip","setSkip","useSpots","target","spots","search","loadMore","setLoadMore","isInitialMount","useRef","useEffect","current","term","length","console","log","w","gridGap","my","px","title","maxW","onChange","e","currentTarget","cityMap","map","city","restaurantCategories","item","templateColumns","base","sm","lg","xl","spot","onClick","ID","renderCard","variant"],"mappings":"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","file":"static/js/4.a0ea1699.chunk.js","sourcesContent":["export * from \"@chakra-ui/color-mode\"\nexport * from \"@chakra-ui/styled-system\"\nexport { keyframes } from \"@emotion/react\"\nexport type { Interpolation } from \"@emotion/react\"\nexport * from \"./hooks\"\nexport * from \"./system.types\"\nexport * from \"./providers\"\nexport { omitThemingProps } from \"./system.utils\"\nexport * from \"./system\"\nexport * from \"./forward-ref\"\nexport * from \"./use-style-config\"\nexport { shouldForwardProp } from \"./should-forward-prop\"\n","import { useBoolean, useId } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\"\nimport {\n  createContext,\n  mergeRefs,\n  PropGetter,\n  PropGetterV2,\n} from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<FormControlProviderContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useBoolean()\n\n  const getHelpTextProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = React.useCallback<PropGetterV2<\"label\">>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id ?? labelId,\n      htmlFor: props.htmlFor ?? id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = React.useCallback<PropGetterV2<\"div\">>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Form\", props)\n  const ownProps = omitThemingProps(props)\n  const { getRootProps, htmlProps: _, ...context } = useFormControlProvider(\n    ownProps,\n  )\n\n  const className = cx(\"chakra-form-control\", props.className)\n  const contextValue = React.useMemo(() => context, [context])\n\n  return (\n    <FormControlProvider value={contextValue}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...getRootProps({}, ref)}\n          className={className}\n          __css={styles[\"container\"]}\n        />\n      </StylesProvider>\n    </FormControlProvider>\n  )\n})\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">((props, ref) => {\n  const field = useFormControlContext()\n  const styles = useStyles()\n  const className = cx(\"chakra-form__helper-text\", props.className)\n  return (\n    <chakra.div\n      {...field?.getHelpTextProps(props, ref)}\n      __css={styles.helperText}\n      className={className}\n    />\n  )\n})\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n","import { useCallback, useState } from \"react\"\n\ntype InitialState = boolean | (() => boolean)\n\n/**\n * React hook to manage boolean (on - off) states\n *\n * @param initialState the initial boolean state value\n */\nexport function useBoolean(initialState: InitialState = false) {\n  const [value, setValue] = useState(initialState)\n\n  const on = useCallback(() => {\n    setValue(true)\n  }, [])\n\n  const off = useCallback(() => {\n    setValue(false)\n  }, [])\n\n  const toggle = useCallback(() => {\n    setValue((prev) => !prev)\n  }, [])\n\n  return [value, { on, off, toggle }] as const\n}\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/utils\"\nimport { FocusEventHandler } from \"react\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: FocusEventHandler<T>\n  onBlur?: FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const {\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isRequired,\n    ...rest\n  } = useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  PropsOf,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, mergeWith, split, __DEV__, dataAttr } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface SelectFieldProps\n  extends Omit<HTMLChakraProps<\"select\">, Omitted> {\n  isDisabled?: boolean\n}\n\nexport const SelectField = forwardRef<SelectFieldProps, \"select\">(\n  (props, ref) => {\n    const { children, placeholder, className, ...rest } = props\n\n    return (\n      <chakra.select\n        {...rest}\n        ref={ref}\n        className={cx(\"chakra-select\", className)}\n      >\n        {placeholder && <option value=\"\">{placeholder}</option>}\n        {children}\n      </chakra.select>\n    )\n  },\n)\n\nif (__DEV__) {\n  SelectField.displayName = \"SelectField\"\n}\n\ninterface RootProps extends Omit<HTMLChakraProps<\"div\">, \"color\"> {}\n\ninterface SelectOptions extends FormControlOptions {\n  /**\n   * The border color when the select is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the select is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the select element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   * please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n  /**\n   * The placeholder for the select. We render an `<option/>` element that has\n   * empty value.\n   *\n   * ```jsx\n   * <option value=\"\">{placeholder}</option>\n   * ```\n   */\n  placeholder?: string\n  /**\n   * The size (width and height) of the icon\n   */\n  iconSize?: string\n  /**\n   * The color of the icon\n   */\n  iconColor?: string\n}\n\nexport interface SelectProps\n  extends SelectFieldProps,\n    ThemingProps<\"Select\">,\n    SelectOptions {\n  /**\n   * Props to forward to the root `div` element\n   */\n  rootProps?: RootProps\n  /**\n   * The icon element to use in the select\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement<any>\n}\n\n/**\n * React component used to select one item from a list of options.\n */\nexport const Select = forwardRef<SelectProps, \"select\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Select\", props)\n\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    isFullWidth,\n    ...rest\n  } = omitThemingProps(props)\n\n  const [layoutProps, otherProps] = split(rest, layoutPropNames as any[])\n\n  const ownProps = useFormControl(otherProps)\n\n  const rootStyles: SystemStyleObject = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color,\n  }\n\n  const fieldStyles: SystemStyleObject = mergeWith({}, styles.field, {\n    paddingEnd: \"2rem\",\n    _focus: { zIndex: \"unset\" },\n  })\n\n  return (\n    <chakra.div\n      className=\"chakra-select__wrapper\"\n      __css={rootStyles}\n      {...layoutProps}\n      {...rootProps}\n    >\n      <SelectField\n        ref={ref}\n        height={h ?? height}\n        minH={minH ?? minHeight}\n        placeholder={placeholder}\n        {...ownProps}\n        __css={fieldStyles}\n      >\n        {props.children}\n      </SelectField>\n\n      <SelectIcon\n        data-disabled={dataAttr(ownProps.disabled)}\n        {...((iconColor || color) && { color: iconColor || color })}\n        __css={styles.icon}\n        {...(iconSize && { fontSize: iconSize })}\n      >\n        {icon}\n      </SelectIcon>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Select.displayName = \"Select\"\n}\n\nexport const DefaultIcon: React.FC<PropsOf<\"svg\">> = (props) => (\n  <svg viewBox=\"0 0 24 24\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n    />\n  </svg>\n)\n\nconst IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n})\n\ninterface SelectIconProps extends HTMLChakraProps<\"div\"> {}\n\nconst SelectIcon: React.FC<SelectIconProps> = (props) => {\n  const { children = <DefaultIcon />, ...rest } = props\n\n  const clone = React.cloneElement(children as any, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\",\n    },\n  })\n\n  return (\n    <IconWrapper {...rest} className=\"chakra-select__icon-wrapper\">\n      {React.isValidElement(children) ? clone : null}\n    </IconWrapper>\n  )\n}\n\nif (__DEV__) {\n  SelectIcon.displayName = \"SelectIcon\"\n}\n","import { useEffect, useState, useRef } from 'react'\nimport { restaurantCategories } from 'data/restaurantCategories'\nimport {\n  VStack,\n  Grid,\n  useColorMode,\n  Select,\n  Button,\n  Flex\n} from '@chakra-ui/react'\nimport { cityMap } from 'data/cityData'\nimport { useParams, useNavigate } from 'react-router-dom'\nimport { useSpots } from 'hooks'\nimport { SectionDivider } from 'Components/SectionDivider'\nimport { SpotCard } from 'Components/Cards'\nconst SpotPage = () => {\n  const { colorMode } = useColorMode()\n  const navigate = useNavigate()\n  const { place, classify } = useParams()\n  const [currentSpots, setCurrentSpots] = useState([])\n  const [classitem, setClassItem] = useState(classify)\n  const [searchTerm, setSearchTerm] = useState(place)\n  const [skip, setSkip] = useState(0)\n  const [spots, search] = useSpots({ target: 'Restaurant' }, place, classify)\n  const [loadMore, setLoadMore] = useState(true)\n  const isInitialMount = useRef(true)\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false\n    } else {\n      setLoadMore(true)\n      setSkip(0)\n      setCurrentSpots([])\n      search({ term: searchTerm, classify: classitem, skip: 0 })\n    }\n  }, [searchTerm, classitem])\n  useEffect(() => {\n    if (skip === 0) {\n      return {}\n    } else {\n      search({ term: searchTerm, classify: classitem, skip })\n    }\n  }, [skip])\n  useEffect(() => {\n    setLoadMore(!(spots.length === 0))\n    setCurrentSpots([...currentSpots, ...spots])\n    console.log(currentSpots)\n  }, [spots])\n  const renderCard = (spots) => {\n    return spots.map((spot) => (\n      <SpotCard\n        key={spot.ID}\n        spot={spot}\n        onClick={() => navigate(`/Restaurant/detail/${spot.ID}`)}\n      />\n    ))\n  }\n  return (\n    <VStack w=\"100%\" gridGap={7} my={14}>\n      <VStack px={5}>\n        <SectionDivider\n          title=\"想吃什麼?\"\n          color={colorMode === 'light' ? 'brand.200' : 'brand.100'}\n        />\n      </VStack>\n      <Flex gridGap={5}>\n        <Select\n          maxW=\"300px\"\n          onChange={(e) => setSearchTerm(e.currentTarget.value)}\n          value={searchTerm}\n        >\n          <option disabled>選擇地區</option>\n          {[...cityMap].map((city) => (\n            <option key={city[1]} value={city[1]}>\n              {city[0]}\n            </option>\n          ))}\n        </Select>\n        <Select\n          maxW=\"300px\"\n          onChange={(e) => setClassItem(e.currentTarget.value)}\n          value={classitem}\n        >\n          <option disabled>選擇種類</option>\n          {[...[{ name: '全部' }], ...restaurantCategories].map((item) => (\n            <option\n              key={item.name}\n              value={item.name === '全部' ? '' : item.name}\n            >\n              {item.name}\n            </option>\n          ))}\n        </Select>\n      </Flex>\n      <Grid\n        w=\"80%\"\n        templateColumns={{\n          base: 'repeat(1, 1fr)',\n          sm: 'repeat(2, 1fr)',\n          lg: 'repeat(3, 1fr)',\n          xl: 'repeat(4, 1fr)'\n        }}\n        gridGap={5}\n      >\n        {renderCard(currentSpots)}\n      </Grid>\n      <Button\n        variant=\"default\"\n        disabled={!loadMore}\n        onClick={() => setSkip(skip + 30)}\n      >\n        {loadMore ? '載入更多' : '已到底部'}\n      </Button>\n    </VStack>\n  )\n}\n\nexport default SpotPage\n"],"sourceRoot":""}