{"version":3,"sources":["Components/Map/Map.js","Pages/DetailPage.js"],"names":["MyMap","lat","lng","name","colorMode","useColorMode","Marker","position","flexDirection","transform","onClick","window","open","as","MdLocationOn","h","w","color","base","sm","md","borderRadius","overflow","size","zIndex","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","DetailPage","navigate","useNavigate","useState","currentDetail","setCurrentDetail","nearbySpots","setNearbySpots","useParams","target","id","useNearby","nearby","searchNearby","useDetail","detail","search","isInitialMount","useRef","useEffect","current","Position","PositionLat","lon","PositionLon","renderTag","tagItem","py","px","background","fontSize","gridGap","my","templateColumns","lg","backgroundColor","src","Picture","PictureUrl1","placeholder","City","Class1","Class2","Class3","Level","Name","spacing","wordBreak","FiClock","OpenTime","Phone","FaPhoneAlt","href","WebsiteUrl","RiGlobalLine","rel","FiMapPin","DescriptionDetail","SectionDivider","title","xl","map","spot","ID"],"mappings":"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","file":"static/js/6.adfa869b.chunk.js","sourcesContent":["import { Flex, Icon, useColorMode, Heading } from '@chakra-ui/react'\n// import { Flex } from '@chakra-ui/react'\nimport { MdLocationOn } from 'react-icons/md'\nimport GoogleMapReact from 'google-map-react'\nimport PropTypes from 'prop-types'\n\nconst MyMap = ({ lat, lng, name }) => {\n  const { colorMode } = useColorMode()\n  const Marker = () => (\n    <Flex\n      position='absolute'\n      flexDirection='column'\n      transform='translate(-50%, -100%)'\n      onClick={() =>\n        window.open(\n          `http://www.google.com/maps/search/${name}/@${lat},${lng},20z`,\n          '_blank'\n        )\n      }\n    >\n      <Icon\n        as={MdLocationOn}\n        h='50px'\n        w='50px'\n        color={colorMode === 'light' ? 'brand.200' : 'brand.black'}\n      />\n    </Flex>\n  )\n  return (\n    <Flex\n      h={{ base: '218px', sm: '300px', md: '523px' }}\n      w='80%'\n      borderRadius='16px'\n      overflow='hidden'\n    >\n      <Heading\n        color={colorMode === 'light' ? 'brand.200' : 'brand.black'}\n        transform='translate(8px, 5px)'\n        position='absolute'\n        size='sm'\n        zIndex={1}\n      >\n        點擊圖示連結Google map\n      </Heading>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_KEY }}\n        defaultCenter={{ lat, lng }}\n        defaultZoom={12}\n      >\n        <Marker lat={lat} lng={lng} />\n      </GoogleMapReact>\n    </Flex>\n  )\n}\n\nMyMap.propTypes = {\n  lat: PropTypes.number,\n  lng: PropTypes.number,\n  name: PropTypes.string\n}\n\nexport default MyMap\n","import {\n  VStack,\n  List,\n  ListItem,\n  ListIcon,\n  Grid,\n  Image,\n  Flex,\n  Text,\n  Heading,\n  useColorMode,\n  Divider\n} from '@chakra-ui/react'\nimport { FaPhoneAlt } from 'react-icons/fa'\nimport { RiGlobalLine } from 'react-icons/ri'\nimport { FiMapPin, FiClock } from 'react-icons/fi'\nimport { useParams, useNavigate } from 'react-router-dom'\nimport { useDetail, useNearby } from 'hooks'\nimport { useRef, useState, useEffect } from 'react'\nimport { SectionDivider } from 'Components/SectionDivider'\nimport { SpotCard } from 'Components/Cards'\nimport { MyMap } from 'Components/Map'\nimport placeholder from 'assets/images/placeholders/placeholderBig.png'\nconst DetailPage = () => {\n  const navigate = useNavigate()\n  const { colorMode } = useColorMode()\n  const [currentDetail, setCurrentDetail] = useState({})\n  const [nearbySpots, setNearbySpots] = useState([])\n  const { target, id } = useParams()\n  const [nearby, searchNearby] = useNearby({ target })\n  const [detail, search] = useDetail({ target }, id)\n  const isInitialMount = useRef(true)\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false\n    } else {\n      search(id)\n    }\n  }, [])\n  useEffect(() => {\n    setCurrentDetail(detail)\n    // console.log(currentDetail)\n  }, [detail])\n  useEffect(() => {\n    currentDetail[0] &&\n      searchNearby({\n        lat: currentDetail[0].Position.PositionLat,\n        lon: currentDetail[0].Position.PositionLon\n      })\n  }, [currentDetail])\n  useEffect(() => {\n    setNearbySpots(nearby)\n    // console.log(nearbySpots)\n  }, [nearby])\n  const renderTag = (tagItem) => {\n    return tagItem ? (\n      <Flex\n        borderRadius=\"16px\"\n        py={1.5}\n        px={3}\n        background=\"brand.100\"\n        color=\"white\"\n        fontSize=\"14px\"\n      >\n        {tagItem}\n      </Flex>\n    ) : (\n      ''\n    )\n  }\n  const renderNearby = () => {\n    return nearbySpots.map((spot) => (\n      <SpotCard\n        key={spot.ID}\n        spot={spot}\n        onClick={() => navigate(`/${target}/detail/${spot.ID}`)}\n      />\n    ))\n  }\n  return currentDetail[0] ? (\n    <VStack gridGap={7} my={14}>\n      <Grid\n        w=\"80%\"\n        templateColumns={{\n          base: 'repeat(1, 1fr)',\n          lg: 'repeat(2, 1fr)'\n        }}\n        gridGap={5}\n      >\n        <Image\n          backgroundColor=\"white\"\n          borderRadius=\"16px\"\n          src={\n            currentDetail[0].Picture.PictureUrl1\n              ? currentDetail[0].Picture.PictureUrl1\n              : placeholder\n          }\n          h=\"100%\"\n        ></Image>\n        <Flex flexDirection=\"column\" gridGap={3}>\n          <Text color=\"brand.orange\" fontSize={{ base: '14px', md: '16px' }}>\n            {currentDetail[0].City}\n          </Text>\n          <Flex gridGap={3}>\n            {renderTag(currentDetail[0].Class1)}\n            {renderTag(currentDetail[0].Class2)}\n            {renderTag(currentDetail[0].Class3)}\n            {renderTag(currentDetail[0].Level)}\n          </Flex>\n          <Heading\n            size=\"md\"\n            color={colorMode === 'light' ? 'brand.200' : 'whiteAlpha.900'}\n          >\n            {currentDetail[0].Name}\n          </Heading>\n          <Divider />\n          <List spacing={3} my={2}>\n            <ListItem wordBreak=\"break-all\">\n              <ListIcon\n                as={FiClock}\n                w=\"20px\"\n                h=\"20px\"\n                color={colorMode === 'light' ? 'brand.200' : 'whiteAlpha.900'}\n              />\n              {currentDetail[0].OpenTime\n                ? currentDetail[0].OpenTime\n                : '開放空間'}\n            </ListItem>\n            {currentDetail[0].Phone && (\n              <ListItem wordBreak=\"break-all\">\n                <ListIcon\n                  as={FaPhoneAlt}\n                  w=\"20px\"\n                  h=\"20px\"\n                  color={colorMode === 'light' ? 'brand.200' : 'whiteAlpha.900'}\n                />\n                <a href={`tel: +${currentDetail[0].Phone}`}>\n                  {currentDetail[0].Phone}\n                </a>\n              </ListItem>\n            )}\n            {currentDetail[0].WebsiteUrl && (\n              <ListItem wordBreak=\"break-all\">\n                <ListIcon\n                  as={RiGlobalLine}\n                  w=\"25px\"\n                  h=\"25px\"\n                  color={colorMode === 'light' ? 'brand.200' : 'whiteAlpha.900'}\n                />\n                <a\n                  href={currentDetail[0].WebsiteUrl}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {currentDetail[0].WebsiteUrl}\n                </a>\n              </ListItem>\n            )}\n            {currentDetail[0].Position && (\n              <ListItem wordBreak=\"break-all\">\n                <ListIcon\n                  as={FiMapPin}\n                  w=\"25px\"\n                  h=\"25px\"\n                  color={colorMode === 'light' ? 'brand.200' : 'whiteAlpha.900'}\n                />\n                <a\n                  href={`http://www.google.com/maps/place/${currentDetail[0].Position.PositionLat},${currentDetail[0].Position.PositionLon}`}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {currentDetail[0].Name}\n                </a>\n              </ListItem>\n            )}\n            <Divider />\n          </List>\n          <Text>{currentDetail[0].DescriptionDetail}</Text>\n        </Flex>\n      </Grid>\n      <MyMap\n        lat={currentDetail[0] && currentDetail[0].Position.PositionLat}\n        lng={currentDetail[0] && currentDetail[0].Position.PositionLon}\n        name={currentDetail[0].Name}\n      />\n      <VStack px={5}>\n        <SectionDivider\n          title=\"附近景點\"\n          color={colorMode === 'light' ? 'brand.200' : 'brand.100'}\n        />\n      </VStack>\n      <Grid\n        w=\"80%\"\n        templateColumns={{\n          base: 'repeat(1, 1fr)',\n          sm: 'repeat(2, 1fr)',\n          lg: 'repeat(3, 1fr)',\n          xl: 'repeat(4, 1fr)'\n        }}\n        gridGap={5}\n      >\n        {renderNearby()}\n      </Grid>\n    </VStack>\n  ) : (\n    <VStack gridGap={7} my={14}>\n      <Grid\n        w=\"80%\"\n        templateColumns={{\n          base: 'repeat(1, 1fr)',\n          md: 'repeat(2, 1fr)'\n        }}\n        gridGap={5}\n      ></Grid>\n    </VStack>\n  )\n}\n\nexport default DetailPage\n"],"sourceRoot":""}